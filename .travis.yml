language: node_js
node_js:
  - '15.2.1'

deploy_service_job: &DEPLOY_SERVICE_JOB
  cache:
    directories:
      - node_modules
      - ${SERVICE_PATH}/EHR_Realm_App/unit_tests/node_modules

  install:
    - pip install --quiet --user awscli
    - npm install -g serverless mongodb-realm-cli
    - npm install
    - cd ${SERVICE_PATH}/EHR_Realm_App/unit_tests
    - npm install
    - cd -

  script:
    # Start Backend
    # Start Unit Tests
    - cd ${SERVICE_PATH}/EHR_Realm_App/unit_tests
    - npm run test
    # Import App to Realm
    - cd ../..
    # Login to RealmCLI with enviroment variables
    - realm-cli login --api-key="${MONGO_API_KEY}" --private-api-key="${MONGO_PRIVATE_KEY}"
    # Import the Realm app for TEST environment
    - realm-cli import --app-id=ehr_realm_app_test-qfdpg --path=EHR_Realm_App --strategy=merge --yes
    - cd -

    # Start Frontend
    # - cd ${SERVICE_PATH} # Change Directory to root
    # Try to create folder may not be necessary anymore
    - mkdir -p /home/travis/.serverless/components/registry/npm/@sls-next/serverless-component@1.18.0
    # Make the .serverless directory inside root
    - mkdir .serverless
    # Sync Serverless Files
    - aws s3 sync s3://dev-glpg-cloud-static/.serverless .serverless
    # Run serverless to push frontend to AWS Lambda Edge
    - serverless

environments:
  ## Accessing Keys set in Travis.  Dev / Prod the same for now
  - &PRODUCTION_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  - &DEVELOPMENT_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

jobs:
  include:
    - <<: *DEPLOY_SERVICE_JOB
      name: 'Deploy'
      if: branch = master
      env:
        - SERVICE_PATH="backend"
        - STAGE_NAME=prod
        - *PRODUCTION_ENV

notifications:
  slack:
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: always
      on_failure: never
      if: type = push
      template:
        - 'Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :white_check_mark:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: always
      on_failure: never
      if: type = pull_request
      template:
        - 'Pull Request <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :white_check_mark:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: never
      on_failure: always
      if: type = push
      template:
        - 'Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :rotating_light:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: never
      on_failure: always
      if: type = pull_request
      template:
        - 'Pull Request <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :rotating_light:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
