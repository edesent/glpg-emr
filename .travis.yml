language: node_js
node_js:
  - '15.2.1'

deploy_service_job: &DEPLOY_SERVICE_JOB
  cache:
  #caching directories we assume speeds up later install. 
    directories:
      - node_modules ## Seems right
      - ${SERVICE_PATH}/node_modules #this would be essentially ./frontend/ node_modules there is nothing there would this brake the script
  #   - ${SERVICE_PATH}/.serverless # I think we can cache this

  install:
    - pip install --quiet --user awscli  #install aws
    - npm install -g serverless ## Install Serverless globally
    - npm install -g mongodb-realm-cli # Install MongoDB CLI 
    - cd ${SERVICE_PATH} # Change Directory to ./frontend 
    - npm install  
    - cd -  

  script:
    #This will now be 2 parts fronted / backend
    
    #Start Backend
    - cd backend
    #Login to RealmCLI with enviroment variables
    - realm-cli login --api-key="${MONGO_API_KEY}" --private-api-key="${MONGO_PRIVATE_KEY}"
    #Import the Realm app 
    - realm-cli import --app-id=ehr_realm_app-lfyfr --path=EHR_Realm_App --strategy=merge --yes
    #Reset command line
    - cd -  

    #Start Frontend
    - cd ${SERVICE_PATH} # Change Directory to ./frontend 
    #- aws --version  # - serverless deploy -s ${TRAVIS_BRANCH} --component
    # Try to create folder may not be necessary anymore
    - mkdir -p /home/travis/.serverless/components/registry/npm/@sls-next/serverless-component@1.18.0
    # Make the .serverless directory inside ./frontend
    - mkdir .serverless
    # Sync Serverless Files
    - aws s3 sync s3://dev-glpg-cloud-static/.serverless .serverless
    - serverless # Run serverless to push frontend to AWS Lambda Edge


environments:
    ## Accessing Keys set in Travis.  Dev / Prod the same for now
  - &PRODUCTION_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  - &DEVELOPMENT_ENV
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

jobs:
  include:
    - <<: *DEPLOY_SERVICE_JOB
      name: 'Deploy Frontend'
      env:
        - SERVICE_PATH="frontend"
        - STAGE_NAME=prod
        - *PRODUCTION_ENV

notifications:
  slack:
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: always
      on_failure: never
      if: type = push
      template:
        - 'Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :white_check_mark:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: always
      on_failure: never
      if: type = pull_request
      template:
        - 'Pull Request <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :white_check_mark:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: never
      on_failure: always
      if: type = push
      template:
        - 'Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :rotating_light:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'
    - rooms:
        - glpg-hq:OIznQNWGQIGXE4DbypgODTcP
      on_success: never
      on_failure: always
      if: type = pull_request
      template:
        - 'Pull Request <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of *%{repository_name}@%{branch}* by _%{author}_ *%{result}*! :rotating_light:'
        - 'Time: *%{duration}*'
        - 'Commit: _%{commit_subject}_'

